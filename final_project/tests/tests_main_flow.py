import logging
import allure
from final_project.base.base_test import BaseTest


@allure.feature("Тестирование основного флоу клиента.")
class TestMainFlow(BaseTest):
    @allure.story(
        "Главная страница: движение слайдера, выбор товаров в слайдере и добавление в корзину."
    )
    @allure.title("Добавление товаров из слайдера в корзину.")
    def test1_add_pizzas_to_cart_from_slider(self):
        """Добавление товаров в корзину из слайдера на главной странице сайта.
        1. Открыть сайт. - Отображается "Главная" страница сайта.
        2. Навести мышку на изображение с пиццей крайнее справа в слайдере (Пицца «Ветчина и грибы»). - Кнопка
            «В корзину» отображается в нижней части выбранного изображения с пиццей.
        3. Кликнуть на кнопку «В корзину», появившуюся после наведения курсора на слайдер с изображением пиццы
        «Ветчина и грибы». - Сумма возле иконки тележки равна стоимости выбранной пиццы (450,00₽).
        4. Сдвинуть изображения в слайдере, кликнув по левой кнопке слайдера. - Изображение с пиццей «Ветчина и грибы»
            не отображается на странице.
        5. Навести курсор на новое изображение в слайдере (Пицца «Пепперони»), появившиеся после клика по левой кнопке
            слайдера. - Кнопка «В корзину» отображается в нижней части выбранного изображения с пиццей.
        6. Сдвинуть изображения в слайдере, кликнув по правой кнопке слайдера. - Пицца «Ветчина и грибы» снова
            отображается на странице.
        7. Навести мышку на другое изображение с пиццей в слайдере (Пицца «Как у бабушки»). - Кнопка «В корзину»
            появляется при наведении курсора на изображение пиццы, которая не добавлялась в корзину.
        8. Кликнуть на кнопку «В корзину», появившуюся после наведения курсора. - Сумма заказа увеличивается на
            стоимость добавленной пиццы (480,00₽).
        Результат: Сумма заказа равна стоимости выбранных товаров (930,00₽)."""

        logging.info("Открытие сайта.")
        self.slider.open_page()

        logging.debug("Проверка, что открыт нужный сайт.")
        self.slider.is_main_page()

        logging.info("Выбор товара в слайдере.")
        logging.debug("Фокус на одном из товаров в слайдере.")
        self.slider.focus_element_1()

        logging.debug("Ожидание появления кнопки 'В корзину'.")
        self.slider.button1_is_visible()

        logging.debug("Клик по кнопке 'В корзину'.")
        self.slider.button1_click()

        logging.info("Проверка значения цены возле иконки тележки.")
        logging.debug(
            "Проверка, что цена возле иконки тележки изменилась и соответствует цене выбранного товара."
        )
        self.cart_icon.change_price_in_cart()

        logging.info(
            "Клик по левой кнопке слайдера и проверка, что крайний правый товар в слайдере скрывается, а в "
            "крайнем левом положении слайдера появляется новый товар."
        )
        logging.debug("Клик по левой кнопке слайдера.")
        self.slider.slider_left_click()

        logging.debug(
            "Проверить, что крайний правый товар в слайдере сдвинулся и стал невидимым."
        )
        self.slider.element_1_invisible_after_moving()

        logging.debug(
            "Фокус на товаре, появившемся в крайнем левом положении слайдера."
        )
        self.slider.focus_element_new_visible_after_moving()

        logging.debug("Ожидание появления кнопки 'В корзину'.")
        self.slider.button_new_is_visible()

        logging.info(
            "Клик по правой кнопке слайдера и проверка, что крайний правый товар в слайдере снова видим."
        )
        logging.debug("Клик по правой кнопке слайдера.")
        self.slider.slider_right_click()

        logging.debug(
            "Проверить, что крайний правый товар в слайдере снова стал видим."
        )
        self.slider.element_1_visible_after_moving()

        logging.info("Добавление второго товара из слайдера в корзину.")
        logging.debug("Фокус на новом товаре в слайдере.")
        self.slider.focus_element_2()

        logging.debug("Ожидание появления кнопки 'В корзину'.")
        self.slider.button2_is_visible()

        logging.debug("Клик по кнопке 'В корзину'.")
        self.slider.button2_click()

        logging.info("Проверка значения цены возле иконки тележки.")
        logging.debug(
            "Проверка, что цена возле иконки тележки изменилась и соответствует цене двух выбранных товаров."
        )
        self.cart_icon.cart_summ()

    @allure.story(
        "Страница товара: открытие, добавление товара с дополнительной опцией в корзину."
    )
    @allure.title("Добавление в корзину товара с дополнительной опцией.")
    def test2_add_pizza_with_additional_option_to_cart(self):
        """Добавление в корзину товара с дополнительной опцией.
        1. Открыть сайт. - Отображается "Главная" страница сайта.
        2. Нажать на любую картинку пиццы в слайдере. - Отображается страница выбранного товара с информацией о
            данной пицце, т.е. название и цена пиццы на странице продукта соответствуют названию и цене, указанным в
            выбранном слайдере на главной странице.
        3. Кликнуть в поле под текстом "Выбор борта для пиццы". - Отображается выпадающее окно со списком опций.
        4. Выбрать в выпадающем окне один из вариантов борта. - Цена пиццы отображается с учетом стоимости выбранного
            борта.
        5. Нажать кнопку "В корзину" под полем выбора борта пиццы. - Возле иконки тележки отображается стоимость пиццы с
            выбранным бортом.
        Результат: Сумма заказа увеличилась на стоимость пиццы с выбранным вариантом борта.
        """

        logging.info("Открытие сайта.")
        self.slider.open_page()

        logging.debug("Проверка, что открыт нужный сайт.")
        self.slider.is_main_page()

        logging.info("Сохранение названия и цены выбранного товара в слайдере.")
        logging.debug("Сохранение названия выбранного товара.")
        slider_name = self.slider.slider_name()

        logging.debug("Сохранение цены выбранного товара.")
        slider_price = self.slider.slider_price()

        logging.info("Переход на страницу товара.")
        logging.debug("Клик по изображению выбранного товара в слайдере.")
        self.slider.element_click()

        logging.debug("Проверка, что отображается страница выбранного товара.")
        self.product_page.is_product_page()

        logging.info(
            "Проверка, что название и цена товара, выбранного в слайдере, совпадает с названием и ценой на "
            "странице товара."
        )
        with allure.step(
            "Проверить, что название и цена пиццы на странице продукта совпадает с названием и ценой, "
            "указанным в выбранном слайдере на главной странице."
        ):
            logging.debug(
                "Сохранение названия товара, отображаемого на странице товара."
            )
            pizza_name = self.product_page.pizza_name()

            logging.debug("Сохранение цены товара, отображаемого на странице товара.")
            pizza_price = self.product_page.pizza_price()

            logging.debug(
                "Проверка, что названия товара, выбранного в слайдере, совпадает с названием товара "
                "отображаемого на странице товара."
            )
            assert slider_name == pizza_name

            logging.debug(
                "Проверка, что цена товара, выбранного в слайдере, совпадает с ценой товара отображаемого на "
                "странице товара."
            )
            assert slider_price == pizza_price

        logging.info("Выбор дополнительной опции товара.")
        logging.debug("Клик по полю выбора дополнительной опции товара.")
        self.product_page.option_field_click()

        logging.debug("Выбор дополнительной опции товара из выпадающего списка.")
        self.product_page.choose_option_variant()

        logging.info(
            "Проверка, что цена пиццы отображается с учетом стоимости выбранной опции."
        )
        with allure.step(
            "Проверить, что цена пиццы отображается с учетом стоимости выбранного борта."
        ):

            logging.debug("Сохранение цены выбранной опции товара.")
            option_price = self.product_page.option_price()

            logging.debug("Сохранение цены товара с учетом выбранной опции.")
            pizza_price_with_option = self.product_page.pizza_price()

            logging.debug(
                "Проверка, что стоимость товара с учетом выбранной опции равна сумме цены товара без "
                "дополнительной опции и цены выбранной опции."
            )
            assert pizza_price_with_option == pizza_price + option_price

        logging.info("Добавление товара с дополнительной опцией в корзину.")
        logging.debug("Клик по кнопке 'В корзину'.")
        self.product_page.click_button_to_cart()

        logging.info("Проверка значения цены возле иконки тележки.")
        logging.debug(
            "Проверка, что возле иконки тележки отображается стоимость пиццы с выбранной опцией."
        )
        self.cart_icon.check_cart_icon_price()

    @allure.story(
        "Вкладка 'Меню': открытие, использование фильтра по цене, добавление товара в корзину."
    )
    @allure.title(
        "Добавление товара в корзину из вкладки 'Меню' с применением фильтра по цене."
    )
    def test3_add_pizza_to_cart_from_menu(self):
        """Добавление товара в корзину через вкладку "Меню" с применением фильтра по цене.
        1. Открыть сайт. - Отображается "Главная" страница сайта.
        2. Кликнуть по вкладке «Меню» - Отображается страница «Меню».
        3. Выбрать в списке "Категории товаров" раздел «Десерты». - Открывается раздел "Десерты".
        4. Передвинуть ползунки слайдера "Фильтровать по цене", чтобы исключить десерты, которые стоят больше 135
        рублей. - Возле слайдера отображается диапазон цен по 135 рублей включительно.
        5. Нажать под слайдером кнопку "Применить". - Отображаются десерты стоимостью 135 рублей и меньше.
        6. Нажать "В корзину", выбрав понравившийся десерт. - Возле иконки тележки отображается стоимость добавленного
        десерта.
        Результат тестирования: Возле иконки тележки отображается стоимость добавленного десерта.
        """

        logging.info("Открытие сайта.")
        self.slider.open_page()

        logging.debug("Проверка, что открыт нужный сайт.")
        self.slider.is_main_page()

        logging.info("Переход на вкладку «Меню».")
        logging.debug("Клик по вкладке «Меню».")
        self.menu_page.menu_tab_click()

        logging.debug("Проверка, что отображается страница «Меню».")
        self.menu_page.is_menu_page()

        logging.info("Переход в категорию «Десерты».")
        logging.debug("Клик по категории «Десерты».")
        self.menu_page.dessert_tab_click()

        logging.debug("Проверка, что отображается категория «Десерты».")
        self.menu_page.is_dessert_page()

        logging.info(
            "Применение фильтра по цене для изменения ценового диапазона отображаемых товаров."
        )
        logging.debug("Передвижение правого ползунка слайдера влево.")
        self.menu_page.price_slider_move()

        logging.debug(
            "Проверка соответствия изменившегося ценового диапазона желаемому значению 'по 135 руб.'."
        )
        self.menu_page.check_selected_price_level()

        logging.debug("Нажать кнопку 'Применить'.")
        self.menu_page.submit_price_button_click()

        logging.debug("Проверка, что отображаются десерты с ценой не более 135 руб.")
        self.menu_page.check_selected_prices_list()

        logging.info("Добавление одного из отфильтрованных товаров в корзину")
        logging.debug("Клик по кнопке 'В корзину', соответствующей выбранному товару.")
        self.menu_page.dessert_button_click()

        logging.debug(
            "Проверка, что возле иконки тележки отображается стоимость выбранного товара."
        )
        self.cart_icon.get_cart_icon_price()

    @allure.story("Вкладка 'Корзина': открытие, изменение количества товара и суммы.")
    @allure.title("Изменение количества товаров в корзине.")
    def test4_change_product_quantity_in_cart(self):
        """Изменение количества товаров в корзине.
        1. Открыть сайт. - Отображается "Главная" страница сайта.
        2. Добавить несколько разных товаров в корзину. - Сумма возле иконки корзины становится равной стоимости
            выбранных товаров.
        3. Кликнуть вкладку меню "Корзина". - Отображается страница "Корзина".
        4. Проверить, что количество и цены товаров в корзине соответствуют ценам и количеству выбранных товаров. -
            Количество и цены товаров в корзине соответствуют ценам и количеству выбранных товаров.
        5. Навести курсор на поле, в котором отображено количество товара. - В поле с количеством отображаются стрелки
            "вверх-вниз".
        6. Сделать один клик на стрелку "вверх" в поле "Количество" и нажать на кнопку «Обновить корзину». - Кнопка
            «Обновить корзину» становиться не активной для клика. Количество товара в поле увеличилось на единицу. Общая
            стоимость и сумма заказа соответствуют новому количеству.
        Результат тестирования: В корзине отображается измененное количество товара. Общая стоимость и сумма заказа
            соответствуют новому количеству."""

        logging.info("Открытие сайта.")
        self.slider.open_page()

        logging.debug("Проверка, что открыт нужный сайт.")
        self.slider.is_main_page()

        logging.info("Добавление первого товара в корзину.")
        logging.debug("Сохранение цены первого выбранного товара.")
        price_product_1 = self.slider.price_product_1()

        logging.debug("Фокус на одном из товаров в слайдере.")  # noqa
        self.slider.focus_element_1()

        logging.debug("Ожидание появления кнопки 'В корзину'.")
        self.slider.button1_is_visible()

        logging.debug("Клик по кнопке 'В корзину'.")
        self.slider.button1_click()

        logging.info("Переход на вкладку «Меню».")
        logging.debug("Клик по вкладке «Меню».")
        self.menu_page.menu_tab_click()

        logging.debug("Проверка, что отображается страница «Меню».")
        self.menu_page.is_menu_page()

        logging.debug("Сохранение цены второго выбранного товара.")
        price_product_2 = self.menu_page.price_product_2()

        logging.info("Добавление второго товара в корзину.")
        logging.debug("Клик по кнопке 'В корзину', соответствующей выбранному товару.")
        self.menu_page.dessert_button_click()

        logging.debug(
            "Проверка, что возле иконки тележки отображается стоимость двух выбранных товаров."
        )
        self.cart_icon.check_two_products_summ()

        logging.info("Переход на страницу «Корзина».")
        logging.debug("Клик по вкладке меню «Корзина».")
        self.cart_page.cart_tab_click()

        logging.debug("Проверка, что отображается страница «Корзина».")
        self.cart_page.is_cart_page()

        logging.info(
            "Проверка, что количество и цены товаров в корзине соответствуют ценам и количеству выбранных "
            "товаров."
        )
        logging.debug(
            "Проверка, что количество первого товара в корзине соответствует '1'."
        )
        self.cart_page.check_quantity_product_1()

        logging.debug(
            "Проверка, что количество второго товара в корзине соответствует '1'."
        )
        self.cart_page.check_quantity_product_2()

        with allure.step(
            "Проверить, что цены выбранных продуктов соответствуют их ценам в корзине."
        ):

            logging.debug("Сохранение цены первого товара в корзине.")
            cart_price_product_1 = self.cart_page.find_price_in_cart_product_1()

            logging.debug("Сохранение цены второго товара в корзине.")
            cart_price_product_2 = self.cart_page.find_price_in_cart_product_2()

            logging.debug(
                "Проверка, что цена первого выбранного товара соответствует цене первого товара в корзине."
            )
            assert price_product_1 == cart_price_product_1

            logging.debug(
                "Проверка, что цена второго выбранного товара соответствует цене второго товара в корзине."
            )
            assert price_product_2 == cart_price_product_2

        logging.info("Изменение количества одного из товаров в корзине.")
        logging.debug("Увеличить количество первого товара на единицу.")
        self.cart_page.increase_quantity()

        logging.debug("Нажать на кнопку «Обновить корзину».")
        self.cart_page.update_cart()

        logging.debug("Проверка, что кнопка «Обновить корзину» стала не активной.")
        self.cart_page.check_button_state()

        logging.debug("Проверка, что количество первого товара равно '2'.")
        self.cart_page.check_quantity_after_changing()

        logging.info(
            "Проверка, что общая стоимость и сумма заказа соответствуют измененному количеству."
        )
        with allure.step(
            "Проверить, что цена первого продукта в корзине увеличилась соответственно изменению его "
            "количества."
        ):

            logging.debug(
                "Сохранение стоимости первого товара, соответствующей измененному количеству."
            )
            changed_price_product_1 = self.cart_page.find_price_in_cart_product_1()

            logging.debug(
                "Проверка, что стоимость первого товара равна произведению его цены на измененное "
                "количество."
            )
            assert changed_price_product_1 == cart_price_product_1 * 2

        with allure.step(
            "Проверить, что общая стоимость и сумма заказа соответствуют новому количеству."
        ):

            logging.debug(
                "Сохранение общей стоимости заказа, соответствующей измененному количеству."
            )
            subtotal_order_price = self.cart_page.find_subtotal_price()

            logging.debug(
                "Сохранение итоговой суммы заказа, соответствующей измененному количеству."
            )
            total_order_price = self.cart_page.find_total_order_price()

            logging.debug(
                "Проверка, что общая стоимость и сумма заказа соответствуют новому количеству."
            )
            assert (
                subtotal_order_price == total_order_price == changed_price_product_1 + cart_price_product_2
            )

    @allure.story("Вкладка 'Корзина': удаление товара.")
    @allure.title("Удаление одного из товаров из корзины.")
    def test5_delete_product_from_cart(self):
        """Удаление одного из товаров из корзины.
        1. Открыть сайт. - Отображается "Главная" страница сайта.
        2. Добавить несколько разных товаров в корзину. - Сумма возле иконки тележки становится равной стоимости
            выбранных товаров.
        3. Кликнуть иконку тележки в верхней части экрана. - Отображается страница "Корзина".
        4. Удалить одну из позиций в корзине, кликнув на соответствующую иконку возле нее. - Удаленная из корзины
            позиция не отображается. Сумма заказа соответствует списку, отображаемому в корзине. Над списком заказа
            отображается "«Наименование товара» удален. Вернуть?".
        Результат тестирования: Удаленная из корзины позиция не отображается. Сумма заказа соответствует списку,
        отображаемому в корзине. Над списком заказа отображается "«Наименование товара» удален. Вернуть?".
        """

        logging.info("Открытие сайта.")
        self.slider.open_page()

        logging.debug("Проверка, что открыт нужный сайт.")
        self.slider.is_main_page()

        logging.info("Добавление первого товара в корзину.")
        logging.debug("Фокус на одном из товаров в слайдере.")  # noqa
        self.slider.focus_element_1()

        logging.debug("Ожидание появления кнопки 'В корзину'.")
        self.slider.button1_is_visible()

        logging.debug("Клик по кнопке 'В корзину'.")
        self.slider.button1_click()

        logging.info("Переход на вкладку «Меню».")
        logging.debug("Клик по вкладке «Меню».")
        self.menu_page.menu_tab_click()

        logging.info("Добавление второго товара в корзину.")
        logging.debug("Клик по кнопке 'В корзину', соответствующей выбранному товару.")
        self.menu_page.dessert_button_click()

        logging.debug(
            "Проверка, что возле иконки тележки отображается стоимость двух выбранных товаров."
        )
        self.cart_icon.check_two_products_summ()

        logging.info("Переход на страницу «Корзина».")
        logging.debug("Клик по иконке тележки.")
        self.cart_icon.cart_icon_click()

        logging.debug("Проверка, что отображается страница «Корзина».")
        self.cart_page.is_cart_page()

        logging.info("Удаление товара из корзины и проверка изменения суммы заказа.")
        logging.debug(
            "Сохранить общую стоимость заказа в корзине до удаления одного из товаров."
        )
        order_price = self.cart_page.find_total_order_price()

        logging.debug("Сохранить цену второго товара в корзине.")
        cart_price_product_2 = self.cart_page.find_price_in_cart_product_2()

        logging.debug("Удалить один из товаров в корзине.")
        self.cart_page.remove_icon_click()

        logging.debug("Проверка, что удаленный товар не отображается в корзине.")
        self.cart_page.check_invisibility_removed_product()

        with allure.step(
            "Проверить, что сумма заказа соответствует списку, отображаемому в корзине."
        ):

            logging.debug(
                "Сохранить изменившуюся общую стоимость заказа в корзине после удаления товара."
            )
            total_order_price = self.cart_page.find_total_order_price()

            logging.debug(
                "Проверить, что изменившуюся общую стоимость заказа равна сумме заказа до удаления з вычетом "
                "цены удаленного товара."
            )
            assert total_order_price == order_price - cart_price_product_2

        logging.debug(
            "Проверить, что отображается уведомление об удаленном товаре с предложением вернуть его."
        )
        self.cart_page.check_alert_text()

    @allure.story(
        "Вкладка 'Оформление заказа': открытие страницы не авторизованным пользователем."
    )
    @allure.title("Оформление заказа не авторизованным пользователем.")
    def test6_place_order_by_not_authorized_user(self):
        """Оформление заказа не авторизованным пользователем.
        1. Открыть сайт. - Отображается "Главная" страница сайта.
        2. Добавить в корзину любой товар. - Сумма возле иконки тележки становится равной стоимости выбранного товара.
        3. Кликнуть в меню вкладку "Оформление заказа". - Отображается окно с предложением авторизоваться.
        Результат тестирования: Отображается сообщение "Зарегистрированы на сайте? Авторизуйтесь".
        """

        logging.info("Открытие сайта.")
        self.menu_page.open_page()

        logging.debug("Проверка, что открыт нужный сайт.")
        self.slider.is_main_page()

        logging.info("Переход на вкладку «Меню».")
        logging.debug("Клик по вкладке «Меню».")
        self.menu_page.menu_tab_click()

        logging.info("Добавление товара в корзину.")
        logging.debug("Клик по кнопке 'В корзину', соответствующей выбранному товару.")
        self.menu_page.dessert_button_click()

        logging.debug(
            "Проверить, что сумма возле иконки корзины равна стоимости выбранного товара."
        )
        self.cart_icon.get_cart_icon_price()

        logging.info("Переход на вкладку «Оформление заказа».")
        logging.debug("Клик по вкладке «Оформление заказа».")
        self.place_order_page.place_order_tab_click()

        logging.debug("Проверка, что отображается страница «Оформление заказа».")
        self.place_order_page.is_place_order_page()

        logging.debug(
            "Проверка, что отображается сообщение 'Зарегистрированы на сайте? Авторизуйтесь'."
        )
        self.place_order_page.check_authorization()

    @allure.story(
        "Окно регистрации пользователя: открытие страницы авторизованным пользователем, заполнение полей "
        "валидными значениями."
    )
    @allure.title("Регистрация пользователя с вводом валидных данных.")
    def test7_registration_with_valid_data(self):
        """Регистрация пользователя с вводом валидных данных.
        1. Открыть сайт. - Отображается "Главная" страница сайта.
        2. Кликнуть в меню вкладку "Мой аккаунт". - Отображается окно "Мой аккаунт".
        3. Нажать кнопку "Зарегистрироваться". - Отображается окно "Регистрация".
        4. Ввести валидные значения в поля "Имя пользователя", "Адрес почты" и "Пароль".
            Например:
            Имя пользователя: nika10
            Адрес почты:10@10.ru
            Пароль: 1234
            - В полях "Имя пользователя", "Адрес почты", "Пароль" отображаются введенные значения.
        5. Нажать кнопку "Зарегистрироваться". - Отображается окно "Регистрация завершена".
        Результат тестирования: Отображается окно "Регистрация завершена". Во вкладке "Мой аккаунт" отображается имя
        пользователя "nik123"."""

        logging.info("Открытие сайта.")
        self.my_account_page.open_page()

        logging.debug("Проверить, что открыт сайт: https://pizzeria.skillbox.cc/.")
        self.slider.is_main_page()

        logging.info("Переход на вкладку «Мой аккаунт».")
        logging.debug("Клик по вкладке «Мой аккаунт».")
        self.my_account_page.my_account_tab_click()

        logging.debug("Проверка, что отображается страница «Мой аккаунт».")
        self.my_account_page.is_my_account_page()

        logging.info("Переход в окно регистрации.")
        logging.debug("Нажать кнопку «Зарегистрироваться».")
        self.my_account_page.button_registration_click()

        logging.debug("Проверка, что отображается окно «Регистрация».")
        self.my_account_page.is_registration_window()

        logging.info("Заполнение формы регистрации валидными значениями.")
        logging.debug("Ввод валидного имени пользователя.")
        self.my_account_page.enter_login(self.valid_data.USER_NAME_1)

        logging.debug(
            "Проверка, что в поле 'Имя пользователя' отображается введенное значение."
        )
        self.my_account_page.check_login_in_input(self.valid_data.USER_NAME_1)

        logging.debug("Ввод валидного адреса электронной почты.")
        self.my_account_page.enter_email(self.valid_data.EMAIL_ADDRESS_1)

        logging.debug(
            "Проверка, что в поле 'Адрес почты' отображается введенное значение."
        )
        self.my_account_page.check_email_in_input(self.valid_data.EMAIL_ADDRESS_1)

        logging.debug("Ввод валидного пароля.")
        self.my_account_page.enter_password(self.valid_data.PASSWORD_1)

        logging.debug("Проверка, что в поле 'Пароль' отображается введенное значение.")
        self.my_account_page.check_password_in_input(self.valid_data.PASSWORD_1)

        logging.info("Отправка заполненной формы регистрации.")
        logging.debug("Нажать кнопку 'Зарегистрироваться'.")
        self.my_account_page.click_submit_button()

        logging.debug("Проверка, что отображается окно 'Регистрация завершена'.")
        self.my_account_page.is_registration_finished()

        logging.info("Вход в аккаунт и проверка имени пользователя.")
        logging.debug("Клик по вкладке «Мой аккаунт».")
        self.my_account_page.my_account_tab_click()

        logging.debug(
            "Проверить, что имя пользователя в окне 'Мой аккаунт' соответствует введенному при регистрации "
            "значению в поле 'Имя пользователя'."
        )
        self.my_account_page.check_authorization(self.valid_data.USER_NAME_1)

    @allure.story(
        "Окно регистрации пользователя: открытие страницы авторизованным пользователем, заполнение полей "
        "НЕ валидными значениями."
    )
    @allure.title("Регистрация пользователя с вводом НЕ валидных данных.")
    def test8_registration_with_invalid_data(self):
        """Регистрация пользователя с вводом НЕ валидных данных.
        1. Открыть сайт. - Отображается "Главная" страница сайта.
        2. Кликнуть вкладку "Регистрация". - Отображается окно "Регистрация".
        3. Вести не валидные значения в поля "Имя пользователя" и "Адрес почты" и нажать кнопку "Зарегистрироваться". -
            Отображается сообщение о не корректном значении в поле "Имя пользователя".
        4. Очистить поля "Имя пользователя" и "Адрес почты" и нажать кнопку "Зарегистрироваться". - Отображается
            сообщение о не корректном значении в поле "Имя пользователя".
        5. Ввести валидное значение в поле "Имя пользователя". - В поле "Имя пользователя" отображается введенное
            значение.
        6. Ввести в поле "Адрес почты" НЕ валидный адрес с точкой в начале адреса либо с точкой в конце имени, либо с
            множеством точек в имени адреса. - В поле "Адрес почты" отображается введенное значение.
        7. Нажать кнопку "Зарегистрироваться". - Отображается сообщение о не корректном значении в поле "Адрес почты".
        8. Очистить поле "Адрес почты" и ввести туда валидное значение. - В поле "Адрес почты" отображается введенное
            значение.
        9. Ввести в поле "Пароль" один символ или пробел, т.е. значение, которое не соответствует надежному паролю. - В
            поле "Пароль" отображается введенное значение.
        10. Нажать кнопку "Зарегистрироваться". - Отображается сообщение о не корректном значении в поле "Пароль".
        Результат тестирования: На странице отображаются уведомления о не корректных значениях в соответствующих
        полях."""

        logging.info("Открытие сайта.")
        self.my_account_page.open_page()

        logging.debug("Проверить, что открыт сайт: https://pizzeria.skillbox.cc/.")
        self.slider.is_main_page()

        logging.info("Переход в окно регистрации.")
        logging.debug(
            "Клик по вкладке «Регистрация», которая находится в футере страницы."
        )
        self.my_account_page.registration_tab_click()

        logging.debug("Проверка, что отображается окно «Регистрация».")
        self.my_account_page.is_registration_window()

        logging.info(
            "Отправка формы регистрации с НЕ валидным именем пользователя и НЕ валидным email."
        )
        logging.debug("Ввод НЕ валидного имени пользователя.")
        self.my_account_page.enter_login(self.invalid_data.INVALID_USER_NAME)

        logging.debug(
            "Проверить, что в поле 'имя пользователя' отображается введенное значение."
        )
        self.my_account_page.check_login_in_input(self.invalid_data.INVALID_USER_NAME)

        logging.debug("Ввод НЕ валидного адреса почты.")
        self.my_account_page.enter_email(self.invalid_data.INVALID_EMAIL_ADDRESS)

        logging.debug(
            "Проверить, что в поле 'Адрес почты' отображается введенное значение."
        )
        self.my_account_page.check_email_in_input(
            self.invalid_data.INVALID_EMAIL_ADDRESS
        )

        logging.debug("Нажать кнопку 'Зарегистрироваться'.")
        self.my_account_page.click_submit_button()

        logging.info(
            "Проверка появления сообщений об ошибках ввода для соответствующих полей."
        )
        logging.debug(
            "Проверить корректность сообщения об ошибке в ответ на ввод НЕ валидного имени пользователя."
        )
        self.my_account_page.check_error_message_for_username_field()

        logging.debug(
            "Проверить корректность сообщений об ошибках в ответ на ввод НЕ валидного адреса почты."
        )
        self.my_account_page.check_error_message_for_email_field()

        logging.debug(
            "Проверить появление подсказки возле поля 'Имя пользователя' о том, какие символы поле принимает "
            "или не принимает."
        )
        self.my_account_page.wait_alert_tooltip_for_username_fild()

        logging.debug(
            "Проверить появление подсказки возле поля 'Адрес почты' о том, какие символы поле принимает или "
            "не принимает."
        )
        self.my_account_page.wait_alert_tooltip_for_email_fild()

        logging.info("Отправка НЕ заполненной формы регистрации.")
        logging.debug("Очистить поле 'Имя пользователя'.")
        self.my_account_page.username_field_clear()

        logging.debug("Очистить поле 'Адрес почты'.")
        self.my_account_page.email_field_clear()

        logging.debug("Нажать кнопку 'Зарегистрироваться'.")
        self.my_account_page.click_submit_button()

        logging.info(
            "Проверка появления сообщений об ошибках ввода для соответствующих полей."
        )
        logging.debug(
            "Проверить корректность сообщения об ошибке в ответ на отправку не заполненного поля 'Имя "
            "пользователя'."
        )
        self.my_account_page.check_error_message_for_username_field()

        logging.debug(
            "Проверить корректность сообщений об ошибках в ответ на на отправку не заполненного поля "
            "'Адрес почты'."
        )
        self.my_account_page.check_error_message_for_email_field()

        logging.info(
            "Отправка формы регистрации с валидным именем пользователя и не валидным email."
        )
        logging.debug("Ввод валидного имени пользователя.")
        self.my_account_page.enter_login(self.valid_data.USER_NAME_2)

        logging.debug(
            "Проверить, что в поле 'Имя пользователя' отображается введенное значение."
        )
        self.my_account_page.check_login_in_input(self.valid_data.USER_NAME_2)

        logging.debug("Ввод НЕ валидного адреса почты.")
        self.my_account_page.enter_email(self.invalid_data.INVALID_EMAIL_ADDRESS)

        logging.debug(
            "Проверить, что в поле 'Адрес почты' отображается введенное значение."
        )
        self.my_account_page.check_email_in_input(
            self.invalid_data.INVALID_EMAIL_ADDRESS
        )

        logging.debug("Нажать кнопку 'Зарегистрироваться'.")
        self.my_account_page.click_submit_button()

        logging.info(
            "Проверка появления сообщений об ошибках ввода для поля 'Адрес почты'."
        )
        logging.debug(
            "Проверить корректность сообщения об ошибке в ответ на ввод НЕ валидного адреса почты."
        )
        self.my_account_page.check_error_message_for_email_field()

        logging.debug(
            "Проверить появление подсказки возле поля 'Адрес почты' о том, какие символы поле принимает или "
            "не принимает."
        )
        self.my_account_page.wait_alert_tooltip_for_email_fild()

        logging.info(
            "Отправка формы регистрации с валидными именем пользователя и email и НЕ валидным паролем."
        )
        logging.debug("Очистить поле 'Адрес почты'.")
        self.my_account_page.email_field_clear()

        logging.debug("Ввод валидного адреса почты.")
        self.my_account_page.enter_email(self.valid_data.EMAIL_ADDRESS_2)

        logging.debug(
            "Проверить, что в поле 'Адрес почты' отображается введенное значение."
        )
        self.my_account_page.check_email_in_input(self.valid_data.EMAIL_ADDRESS_2)

        logging.debug("Ввод НЕ валидного пароля.")
        self.my_account_page.enter_password(self.invalid_data.INVALID_PASSWORD)

        logging.debug("Проверить, что в поле 'Пароль' отображается введенное значение.")
        self.my_account_page.check_password_in_input(self.invalid_data.INVALID_PASSWORD)

        logging.debug("Нажать кнопку 'Зарегистрироваться'.")
        self.my_account_page.click_submit_button()

        logging.info("Проверка появления сообщений об ошибках ввода для поля 'Пароль'.")
        logging.debug(
            "Проверить корректность сообщения об ошибке в ответ на ввод НЕ валидного пароля."
        )
        self.my_account_page.check_error_message_for_password_field()

    @allure.story(
        "Вкладка 'Оформление заказа': открытие страницы зарегистрированным пользователем, заполнение полей "
        "личных данных валидными значениями."
    )
    @allure.title(
        "Оформление заказа зарегистрированным пользователем с заполнением полей личных данных валидными"
        "значениями."
    )
    def test9_place_order_with_valid_data(self):
        """Оформление заказа зарегистрированным пользователем с заполнением полей личных данных валидными значениями.
        Предусловие: пользователь прошел регистрацию, имеет свой аккаунт.
        1. Открыть сайт. - Отображается "Главная" страница сайта.
        2. Добавить в корзину любой товар. - Сумма возле иконки тележки становится равной стоимости выбранного товара.
        3. Кликнуть в меню вкладку "Оформление заказа". - Отображается окно с предложением авторизоваться.
        4. Кликнуть по ссылке "Авторизуйтесь" и выполнить авторизацию. - Отображается окно "Оформление заказа" с полями
            для ввода личных данных.
        5. Заполнить поля валидными значениями.
            Имя: "иВан/jOhn"
            Фамилия: "ivanoV-пЕтров"
            Адрес: "/пq@-* .5,0"
            Город/Населенный пункт: "mOskow-мОсква"
            Область: "ПY / 5- lш.5,h"
            Почтовый индекс: "123456"
            Телефон: "+79201111111"
            - Введенные данные отображаются в соответствующих полях.
        6. Указать завтрашнюю дату в поле "Дата заказа". - Отображается выбранная дата.
        7. Заполнить поле "Комментарии к заказу". Например: "привезти к 18:00/ by 6 p.m.". - Комментарий отображается в
            поле.
        8. Выбрать оплату при доставке, кликнув соответствующую радио-кнопку. - Выбранная радио-кнопка отображается, как
            нажатая.
        9. Отметить чек-бокс о согласии с условиями веб-сайта внизу страницы. - Чек-бокс отображается, как отмеченный.
        10. Нажать кнопку "Оформить заказ". - Отображается окно "Заказ получен". Сумма заказа и личные данные
            соответствуют выбранному товару и введенным значениям.
        Результат тестирования: Отображается окно "Заказ получен". Сумма заказа и личные данные соответствуют выбранному
        товару и введенным значениям."""

        logging.info("Открытие сайта.")
        self.slider.open_page()

        logging.debug("Проверить, что открыт сайт: https://pizzeria.skillbox.cc/.")
        self.slider.is_main_page()

        logging.info("Добавление товара в корзину.")
        logging.debug("Сохранение цены выбранного товара.")
        product_price = self.slider.slider_price()

        logging.debug("Фокус на одном из товаров в слайдере.")  # noqa
        self.slider.focus_element_2()

        logging.debug("Ожидание появления кнопки 'В корзину'.")
        self.slider.button2_is_visible()

        logging.debug("Клик по кнопке 'В корзину'.")
        self.slider.button2_click()

        logging.debug(
            "Проверить, что сумма возле иконки тележки равна стоимости выбранного товара."
        )
        self.cart_icon.check_price_in_cart()

        logging.info("Переход на вкладку «Оформление заказа».")
        logging.debug("Клик по вкладке «Оформление заказа».")
        self.place_order_page.place_order_tab_click()

        logging.debug("Проверка, что отображается страница «Оформление заказа».")
        self.place_order_page.is_place_order_page()

        logging.info("Выполнение авторизации.")
        logging.debug("Клик по по ссылке «Авторизуйтесь».")
        self.place_order_page.authorization_link_click()

        logging.debug("Ввод имени пользователя, использованного ранее при регистрации.")
        self.my_account_page.enter_login_for_authorization(self.valid_data.USER_NAME_1)

        logging.debug("Ввод пароля, использованного ранее при регистрации.")
        self.my_account_page.enter_password(self.valid_data.PASSWORD_1)

        logging.debug("Кликнуть по чекбоксу «Запомнить меня».")
        self.place_order_page.checkbox_rememberme_click()

        logging.debug("Кликнуть по кнопке «Войти».")
        self.place_order_page.button_login_click()

        logging.info(
            "Заполнение обязательных полей формы валидными значениями личных данных."
        )
        logging.debug("Заполнить поле 'Имя' валидным значением.")
        self.place_order_page.check_name_in_name_field()

        logging.debug("Заполнить поле 'Фамилия' валидным значением.")
        self.place_order_page.check_last_name_in_last_name_field()

        logging.debug("Заполнить поле 'Адрес' валидным значением.")
        self.place_order_page.check_address_in_address_field()

        logging.debug("Заполнить поле 'Город / Населенный пункт' валидным значением.")
        self.place_order_page.check_city_in_city_field()

        logging.debug("Заполнить поле 'Область' валидным значением.")
        self.place_order_page.check_region_in_region_field()

        logging.debug("Заполнить поле 'Почтовый индекс' валидным значением.")
        self.place_order_page.check_postcode_in_postcode_field()

        logging.debug("Заполнить поле 'Телефон' валидным значением.")
        self.place_order_page.check_phone_in_phone_field()

        logging.info("Заполнение дополнительных полей формы.")
        logging.debug("Указать завтрашнюю дату в поле 'Дата заказа'.")
        self.place_order_page.choose_date_tomorrow()

        logging.debug(
            "Проверить, что завтрашняя дата отображается в поле 'Дата заказа'."
        )
        self.place_order_page.check_date_tomorrow()

        logging.debug("Написать комментарий в поле 'Комментарии к заказу'.")
        self.place_order_page.write_comment()

        logging.debug(
            "Проверить, что комментарий отображается в поле 'Комментарии к заказу'."
        )
        self.place_order_page.check_comment()

        logging.info(
            "Выбор условий доставки и подтверждение согласия с условиями сайта."
        )
        logging.debug("Кликнуть по радио-кнопке «Оплата при доставке».")
        self.place_order_page.payment_button_click()

        logging.debug("Проверить, что радио-кнопка «Оплата при доставке» выбрана.")
        self.place_order_page.payment_button_is_selected()

        logging.debug(
            "Кликнуть по чекбоксу, подтверждающему согласие с условиями сайта."
        )
        self.place_order_page.checkbox_terms_click()

        logging.debug(
            "Проверить, что чекбокс, подтверждающий согласие с условиями сайта, выбран."
        )
        self.place_order_page.checkbox_terms_is_selected()

        logging.info("Отправка заполненной формы.")
        logging.debug("Кликнуть по кнопке 'Оформить заказ'.")
        self.place_order_page.button_place_order_click()

        logging.info("Проверка получения заказа и соответствия суммы и личных данных.")
        logging.debug("Проверить, появилось ли подтверждение о получении заказа.")
        self.place_order_page.is_order_confirmed()

        with allure.step(
            "Проверить, что сумма заказа соответствует цене выбранного товара."
        ):

            logging.debug("Сохранение суммы заказа.")
            total_order_amount = self.place_order_page.find_total_order_amount()

            logging.debug(
                "Проверка, что сумма заказа равна стоимости выбранного товара."
            )
            assert product_price == total_order_amount

        logging.debug(
            "Проверка, что личные данные в подтверждении заказа соответствуют введенным значениям."
        )
        self.place_order_page.check_personal_data()

    @allure.story(
        "Вкладка 'Оформление заказа': открытие страницы зарегистрированным пользователем, заполнение полей "
        "личных данных НЕ валидными значениями."
    )
    @allure.title(
        "Оформление заказа зарегистрированным пользователем с заполнением полей личных данных НЕ валидными"
        "значениями."
    )
    def test10_place_order_with_invalid_data(self):
        """Оформление заказа зарегистрированным пользователем с заполнением полей личных данных НЕ валидными значениями.
        Предусловие: пользователь прошел регистрацию, имеет свой аккаунт.
        1. Открыть сайт. - Отображается "Главная" страница сайта.
        2. Добавить в корзину любой товар. - Сумма возле иконки тележки становится равной стоимости выбранного товара.
        3. Кликнуть в меню вкладку "Оформление заказа". - Отображается окно с предложением авторизоваться.
        4. Кликнуть по ссылке "Авторизуйтесь" и выполнить авторизацию. - Отображается окно "Оформление заказа" с полями
            для ввода личных данных.
        5. Очистить все поля и не вводить значения в них. - Отображаются не заполненные поля.
        6. Указать вчерашнюю дату в поле "Дата заказа". - Отображается выбранная дата.
        7. Отметить чек-бокс о согласии с условиями веб-сайта внизу страницы. - Чек-бокс отображается, как отмеченный.
        8. Нажать кнопку "Оформить заказ". - Отображается окно "Оформление заказа" с уведомлениями о необходимости
            заполнить соответствующие поля.
        9. Заполнить поля НЕ валидными значениями.
            Имя: "*"
            Фамилия: "-"
            Адрес: "!"
            Город/Населенный пункт: "("
            Область: ")"
            Почтовый индекс: "w"
            Телефон: "9920111111188888877777766666555544443333222".
            - Введенные данные отображаются в соответствующих полях.
        10. Нажать кнопку "Оформить заказ". - Отображается окно "Оформление заказа" с уведомлениями о необходимости
            исправить не валидные данные в соответствующих полях.
        Результат тестирования: Отображается окно "Оформление заказа" с уведомлениями о необходимости исправить не
        валидные данные в соответствующих полях."""

        logging.info("Открытие сайта.")
        self.slider.open_page()

        logging.debug("Проверить, что открыт сайт: https://pizzeria.skillbox.cc/.")
        self.slider.is_main_page()

        logging.info("Добавление товара в корзину.")
        logging.debug("Фокус на одном из товаров в слайдере.")  # noqa
        self.slider.focus_element_2()

        logging.debug("Ожидание появления кнопки 'В корзину'.")
        self.slider.button2_is_visible()

        logging.debug("Клик по кнопке 'В корзину'.")
        self.slider.button2_click()

        logging.debug(
            "Проверить, что сумма возле иконки тележки равна стоимости выбранного товара."
        )
        self.cart_icon.check_price_in_cart()

        logging.info("Переход на вкладку «Оформление заказа».")
        logging.debug("Клик по вкладке «Оформление заказа».")
        self.place_order_page.place_order_tab_click()

        logging.debug("Проверка, что отображается страница «Оформление заказа».")
        self.place_order_page.is_place_order_page()

        logging.info("Выполнение авторизации.")
        logging.debug("Клик по по ссылке «Авторизуйтесь».")
        self.place_order_page.authorization_link_click()

        logging.debug("Ввод имени пользователя, использованного ранее при регистрации.")
        self.my_account_page.enter_login_for_authorization(self.valid_data.USER_NAME_1)

        logging.debug("Ввод пароля, использованного ранее при регистрации.")
        self.my_account_page.enter_password(self.valid_data.PASSWORD_1)

        logging.debug("Кликнуть по чекбоксу «Запомнить меня».")
        self.place_order_page.checkbox_rememberme_click()

        logging.debug("Кликнуть по кнопке «Войти».")
        self.place_order_page.button_login_click()

        logging.info(
            "Очистка обязательных полей формы для проверки отправки пустых полей."
        )
        logging.debug("Очистка поля 'Имя'.")
        self.place_order_page.clear_data_in_name_field()

        logging.debug("Очистка поля 'Фамилия'.")
        self.place_order_page.clear_data_in_last_name_field()

        logging.debug("Очистка поля 'Адрес'.")
        self.place_order_page.clear_data_in_address_field()

        logging.debug("Очистка поля 'Город / Населенный пункт'.")
        self.place_order_page.clear_data_in_city_field()

        logging.debug("Очистка поля 'Область'.")
        self.place_order_page.clear_data_in_region_field()

        logging.debug("Очистка поля 'Почтовый индекс'.")
        self.place_order_page.clear_data_in_postcode_field()

        logging.debug("Очистка поля 'Телефон'.")
        self.place_order_page.clear_data_in_phone_field()

        logging.info("Заполнение дополнительных полей формы.")
        logging.debug("Указать вчерашнюю дату в поле 'Дата заказа'.")
        self.place_order_page.choose_date_yesterday()

        logging.debug(
            "Проверить, что вчерашняя дата отображается в поле 'Дата заказа'."
        )
        self.place_order_page.check_date_yesterday()

        logging.info("Подтверждение согласия с условиями сайта.")
        logging.debug(
            "Кликнуть по чекбоксу, подтверждающему согласие с условиями сайта."
        )
        self.place_order_page.checkbox_terms_click()

        logging.debug(
            "Проверить, что чекбокс, подтверждающий согласие с условиями сайта, выбран."
        )
        self.place_order_page.checkbox_terms_is_selected()

        logging.info("Отправка формы с пустыми обязательными полями.")
        logging.debug("Кликнуть по кнопке 'Оформить заказ'.")
        self.place_order_page.button_place_order_click()

        logging.info(
            "Проверка, что отображается окно 'Оформление заказа' с сообщениями о некорректных значениях в "
            "соответствующих полях."
        )
        logging.debug("Проверить, что отображается окно 'Оформление заказа'.")
        self.place_order_page.is_place_order_window()

        logging.debug(
            "Проверить, что отображаются сообщения о некорректных значениях в полях для ввода личных данных."
        )
        self.place_order_page.is_error_message_visible()

        logging.info(
            "Заполнение обязательных полей формы НЕ валидными значениями личных данных."
        )
        logging.debug("Заполнить поле 'Имя' НЕ валидным значением.")
        self.place_order_page.send_data_in_name_field(self.invalid_data.INVALID_NAME_1)

        logging.debug("Заполнить поле 'Фамилия' НЕ валидным значением.")
        self.place_order_page.send_data_in_last_name_field(
            self.invalid_data.INVALID_LAST_NAME_1
        )

        logging.debug("Заполнить поле 'Адрес' НЕ валидным значением.")
        self.place_order_page.send_data_in_address_field(
            self.invalid_data.INVALID_ADDRESS_1
        )

        logging.debug(
            "Заполнить поле 'Город / Населенный пункт' НЕ валидным значением."
        )
        self.place_order_page.send_data_in_city_field(self.invalid_data.INVALID_CITY_1)

        logging.debug("Заполнить поле 'Область' НЕ валидным значением.")
        self.place_order_page.send_data_in_region_field(
            self.invalid_data.INVALID_REGION_1
        )

        logging.debug("Заполнить поле 'Почтовый индекс' НЕ валидным значением.")
        self.place_order_page.send_data_in_postcode_field(
            self.invalid_data.INVALID_POSTCODE_1
        )

        logging.debug("Заполнить поле 'Телефон' НЕ валидным значением.")
        self.place_order_page.send_data_in_phone_field(
            self.invalid_data.INVALID_PHONE_1
        )

        logging.info("Отправка формы с Не валидными значениями в обязательных полях.")
        logging.debug("Кликнуть по кнопке 'Оформить заказ'.")
        self.place_order_page.button_place_order_click()

        logging.info(
            "Проверка, что сообщения о некорректных значениях в полях формы отображаются в окне 'Оформление "
            "заказа'."
        )
        logging.debug(
            "Проверить, не изменилось ли окно 'Оформление заказа' на 'Заказ получен'."
        )
        self.place_order_page.is_window_name_changed()

        logging.debug(
            "Проверить, что сообщения о некорректных значениях в полях для ввода личных данных продолжают "
            "отображаться на странице."
        )
        self.place_order_page.is_error_message_invisible()
